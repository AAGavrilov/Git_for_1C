Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.ТребованиеНакладная"); //Указываем документ к которому делаем внешнюю печ. форму
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); //может быть - ПечатнаяФорма, ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов...
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Акт на списание ТМЦ (РТУ)"); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	ПараметрыРегистрации.Вставить("Версия", "1.25.0218");
	ПараметрыРегистрации.Вставить("Информация", "Акт на списание ТМЦ (РТУ)");
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "Акт на списание ТМЦ (РТУ)", "АктНаСписаниеТМЦ_РТУ", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));//как будет выглядеть описание печ.формы для пользователя
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); //имя макета печ.формы
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка")); //ВызовСерверногоМетода
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;  
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктНаСписаниеТМЦ_РТУ", "Акт на списание ТМЦ (РТУ)", СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати));
	
КонецПроцедуры // Печать()

Функция СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктНаСписаниеТМЦ_РТУ";      
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.Автомасштаб = Истина;
	
	
	Для  Каждого СсылкаНаДокумент Из МассивОбъектов Цикл
		
		Макет = ПолучитьМакет("Акт");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
		Запрос.Текст = "ВЫБРАТЬ
		|	ТребованиеНакладная.Номер КАК Номер,
		|	ТребованиеНакладная.Дата КАК Дата,
		|	ТребованиеНакладная.Организация КАК Организация,
		|	ТребованиеНакладная.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ТребованиеНакладная.Склад КАК Склад,
		|	ТребованиеНакладная.Склад.Код КАК КодСклада,
		|	ТребованиеНакладная.ПодразделениеОрганизации КАК Подразделение,
		|	ТребованиеНакладная.ПодразделениеОрганизации.Код КАК КодПодразделения,
		|	ИСТИНА КАК ОтражатьВБухгалтерскомУчете,
		|	УК_ДополнительныеАналитики.ЗначениеАналитики КАК СтатьяОборотов
		|ИЗ
		|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УК_ДополнительныеАналитики КАК УК_ДополнительныеАналитики
		|		ПО ТребованиеНакладная.Ссылка = УК_ДополнительныеАналитики.Объект
		|			И (УК_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.УК_ВидыДополнительныхАналитик.СтатьяОборотов))
		|ГДЕ
		|	ТребованиеНакладная.Ссылка = &ТекущийДокумент";
		
		РеквизитыШапки = Запрос.Выполнить().Выбрать();
		РеквизитыШапки.Следующий();
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(РеквизитыШапки);
		
		
		//Шапка
		РеквизитыШапки = Запрос.Выполнить().Выбрать();
		РеквизитыШапки.Следующий();
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(РеквизитыШапки);
		
		СотрудникДиректор = рту_ЗакупкиСервер.ДиректорПоНаправлениюПодразделения(РеквизитыШапки.Подразделение, РеквизитыШапки.Дата);
		Если ЗначениеЗаполнено(СотрудникДиректор) Тогда
			ОбластьМакета.Параметры.ДиректорПоНаправлению = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ТРег(СотрудникДиректор.ФизическоеЛицо));
			ОбластьМакета.Параметры.ДолжностьДиректораПоНаправлению = СотрудникДиректор.Должность;
		КонецЕсли;
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(СсылкаНаДокумент, НСтр("ru = 'Акт списания ТМЦ (за исключением МБП и инвентаря)'"));  
		
		ОбластьМакета.Параметры.ПредставлениеПодразделения = ?(РеквизитыШапки.ОтражатьВБухгалтерскомУчете,
		РеквизитыШапки.ПодразделениеОрганизации, РеквизитыШапки.Подразделение); 
		ОбластьМакета.Параметры.ТекстКомиссии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Комиссией установлено, что в %1 %2 г. при проведении технического обслуживания (ремонтных работ) были использованы и подлежат списанию следующие материалы:'"),
		НРег(ПросклонятьФразуПоСловам(Формат(РеквизитыШапки.Дата, "ДФ=ММММ")+ " ", 6)),
		Формат(РеквизитыШапки.Дата, "ДФ=гггг"));
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МассивОбъектов", СсылкаНаДокумент);
		Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
		Запрос.Текст = М11ТекстЗапросаШапки();
		
		ШапкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ШапкаИтоги.Следующий() Тогда
			
			ДатаНач = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаНач), ШапкаИтоги.ДатаНач, '00010101');
			ДатаКон = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаКон), ШапкаИтоги.ДатаКон, '00010101');
			
			// Из общей таблицы сумм списания получим таблицу по документу с учетом партий указанных в табличной части.
			ТаблицаСуммСписанияПоДокументам = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивовПоПартиям(СсылкаНаДокумент, ДатаНач, ДатаКон);
			
			ПервыйДокумент = Истина;
			Шапка = ШапкаИтоги.Выбрать();
			
			Пока Шапка.Следующий() Цикл
				
				Материалы           = Шапка.Материалы.Выгрузить();
				МатериалыЗаказчиков = Шапка.МатериалыЗаказчика.Выгрузить();
				
				ТаблицаСуммСписанияПоДокументу = ТаблицаСуммСписанияПоДокументу(ТаблицаСуммСписанияПоДокументам, Шапка.Ссылка, Материалы);
				ТаблицаСуммСписанияПоДокументуИсходная = ТаблицаСуммСписанияПоДокументу.Скопировать();
				
				Если Не ПервыйДокумент Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ПервыйДокумент = Ложь;
				НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
				
				
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Заголовок",  "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Ложь));
				Параметры.Вставить("КодОКПО",    Шапка.КодПоОКПО);
				СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
				ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОбОрганизации, 
				"НаименованиеДляПечатныхФорм,");
				Параметры.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
				Параметры.Вставить("ДатаСоставления",          Формат(Шапка.Дата, "ДФ=dd.MM.yy"));
				Параметры.Вставить("Склад",                    Шапка.Склад);
				
				Если Не Шапка.СчетаУчетаЗатратВТаблице Тогда
					Параметры.Вставить("ПредставлениеПодразделения", ПредставлениеПодразделенияЗатрат(Шапка));
					Параметры.Вставить("КоррСчет",Шапка.СчетЗатратКод);
				Иначе
					
					// Может быть несколько, если счета учета затрат - в таблице
					Получатели = Новый Соответствие;
					СчетаУчетаЗатрат = Новый Соответствие;
					Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
						Получатели.Вставить(СтрокаТабличнойЧасти.ПодразделениеЗатрат, ПредставлениеПодразделенияЗатрат(СтрокаТабличнойЧасти));
						СчетаУчетаЗатрат.Вставить(СтрокаТабличнойЧасти.СчетЗатратКод);
					КонецЦикла;
					
					Если Получатели.Количество() = 1 Тогда
						Для Каждого КлючИЗначение Из Получатели Цикл
							Параметры.Вставить("ПредставлениеПодразделения", КлючИЗначение.Значение);
						КонецЦикла;
					КонецЕсли;
					
					Если СчетаУчетаЗатрат.Количество() = 1 Тогда
						Для Каждого КлючИЗначение Из СчетаУчетаЗатрат Цикл
							Параметры.Вставить("КоррСчет",КлючИЗначение.Ключ);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
				Область = Макет.ПолучитьОбласть("Строка");
				
				// Поиск сумм списания активов для заполнения Цены и Суммы
				
				Для Каждого СтрокаТЧ Из Материалы Цикл
					
					Параметры = Новый Структура;
					
					Параметры.Вставить("Счет",                         СтрокаТЧ.Счет);
					Параметры.Вставить("МатериалНаименование",         СтрокаТЧ.Имя);
					Параметры.Вставить("НоменклатурныйНомер",          СтрокаТЧ.Код);
					Параметры.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТЧ.ЕдИзм);
					Параметры.Вставить("ЕдиницаИзмеренияКод",          СтрокаТЧ.ЕдИзмКод);
					Параметры.Вставить("Количество",                   СтрокаТЧ.Количество);
					
					СуммаСписания = СуммаСписания(ТаблицаСуммСписанияПоДокументу, СтрокаТЧ.Материал, СтрокаТЧ.Партия, СтрокаТЧ.Количество);
					
					Параметры.Вставить("Цена",  Окр(СуммаСписания/СтрокаТЧ.Количество, 2));
					Параметры.Вставить("Сумма", СуммаСписания);
					
					Область.Параметры.Заполнить(Параметры);
					
					//Вывод Строк
					Область.Параметры.СтатьяОборотов = РеквизитыШапки.СтатьяОборотов;
					Область.Параметры.НомерСтроки = Материалы.Индекс(СтрокаТЧ) + 1;
					
					ТабличныйДокумент.Вывести(Область);
					
				КонецЦикла;
				
				Для Каждого СтрокаТЧ Из МатериалыЗаказчиков Цикл
					
					Параметры = Новый Структура;
					
					Параметры.Вставить("Счет",                         СтрокаТЧ.Счет);
					Параметры.Вставить("МатериалНаименование",         СтрокаТЧ.Имя);
					Параметры.Вставить("НоменклатурныйНомер",          СтрокаТЧ.Код);
					Параметры.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТЧ.ЕдИзм);
					Параметры.Вставить("ЕдиницаИзмеренияКод",          СтрокаТЧ.ЕдИзмКод);
					Параметры.Вставить("Количество",                   СтрокаТЧ.Количество);
					
					СуммаСписания = СуммаСписания(ТаблицаСуммСписанияПоДокументу, СтрокаТЧ.Материал, Неопределено, СтрокаТЧ.Количество);
					Параметры.Вставить("Цена",  Окр(СуммаСписания/СтрокаТЧ.Количество,2));
					Параметры.Вставить("Сумма", СуммаСписания);
					
					Область.Параметры.Заполнить(Параметры);
					ТабличныйДокумент.Вывести(Область);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		//заполняем подвал
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Всего наименований: %1, на сумму: %2'"),
		СсылкаНаДокумент.Материалы.Количество()+ СсылкаНаДокумент.МатериалыЗаказчика.Количество() ,
		ОбщегоНазначенияБПВызовСервера.ФорматСумм(ТаблицаСуммСписанияПоДокументуИсходная.Итог("Сумма")));
		
		
		Если РеквизитыШапки.КодСклада = "000000048" Тогда // Основной склад (МОЛ: Беспалова, не выводим на печать) 
			МОЛ = Неопределено;
		Иначе
			Отбор = Новый Структура("СтруктурнаяЕдиница", РеквизитыШапки.Склад);
			СрезПоследних = РегистрыСведений.ОтветственныеЛица.СрезПоследних(РеквизитыШапки.Дата, Отбор);
			Если СрезПоследних.Количество() < 1 Тогда
				МОЛ = Неопределено;
			Иначе
				МОЛ = СрезПоследних[0].ФизическоеЛицо;
			КонецЕсли;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(МОЛ) Тогда
			ОбластьМакета.Параметры.МОЛ = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(МОЛ);	
			//ОбластьМакета.Параметры.ДолжностьМол = ПолныеПрава.СведенияФамилияИнициалыОСотруднике(
			//	МОЛ, РеквизитыШапки.Дата, РеквизитыШапки.Организация).Должность;
			СведенияОСотруднике = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(РеквизитыШапки.Организация, МОЛ, РеквизитыШапки.Дата);  
			ОбластьМакета.Параметры.ДолжностьМол = СведенияОСотруднике.Должность; 
		КонецЕсли;
		
		Председатель = Неопределено;
		КодПодразделения = СокрЛП(РеквизитыШапки.КодПодразделения);
		
		
		Если КодПодразделения = "17" ИЛИ КодПодразделения = "15" ИЛИ КодПодразделения = "4" Тогда // АУП
			Председатель = Справочники.Сотрудники.НайтиПоКоду("50829"); //лопатин
			//Председатель = Справочники.СотрудникиОрганизаций.НайтиПоКоду("2003248"); //Сиваков
		ИначеЕсли КодПодразделения = "1" Тогда // Производственный
			Председатель = Справочники.Сотрудники.НайтиПоКоду("2003256");//Стенин
			
			//Председатель = Справочники.СотрудникиОрганизаций.НайтиПоКоду("2003051"); //Дейчев
		ИначеЕсли КодПодразделения = "6"  Тогда//Хозяйственная  
			Если СсылкаНаДокумент.Склад.Код="000000385" Тогда //Каплунов
				Председатель = Справочники.Сотрудники.НайтиПоКоду("2003025");//Булгакова
			Иначе	 
				Председатель = Справочники.Сотрудники.НайтиПоКоду("51199");//Каплунов
			КонецЕсли;
			
		ИначеЕсли КодПодразделения = "9" Тогда // ОТ 
			// изменено по просьбе Тереховой
			Председатель = Справочники.Сотрудники.НайтиПоКоду("2003025");//Булгакова
			//Председатель = Справочники.СотрудникиОрганизаций.НайтиПоКоду("50943"); //Ночевкин
			
		Иначе
			
			ОтветственныеЛица = ПолучитьОтветственногоПоПодразделению(РеквизитыШапки.Дата, РеквизитыШапки.ПодразделениеОрганизации);    
			
			Если ОтветственныеЛица<>Неопределено Тогда
				
				РуководительП 											= ОтветственныеЛица.ФизическоеЛицо;
				ДолжностьПредседателя									= ОтветственныеЛица.Должность;
				
				ОбластьМакета.Параметры.РуководительПодразделения	=	ФизическиеЛицаКлиентСервер.ФамилияИнициалы(РуководительП);
				ОбластьМакета.Параметры.ДолжностьПредседателя		=	ДолжностьПредседателя; 
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Председатель) Тогда
			ФизлицоПредседатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Председатель, "ФизическоеЛицо");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МОЛ) Тогда // Если МОЛ = Сиваков тогда Председатель должен быть Тяллев
			Если МОЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Сотрудники.НайтиПоКоду("2003248"), "ФизическоеЛицо") Тогда
				ФизлицоПредседатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Сотрудники.НайтиПоКоду("51202"), "ФизическоеЛицо");
				Председатель = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФизлицоПредседатель) Тогда
			ОбластьМакета.Параметры.РуководительПодразделения = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФизлицоПредседатель);
			//ОбластьМакета.Параметры.ДолжностьПредседателя = ПолныеПрава.СведенияОСотруднике(
			//	ФизлицоПредседатель, РеквизитыШапки.Дата, РеквизитыШапки.Организация, Председатель).Должность;     
			СведенияОСотруднике = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(РеквизитыШапки.Организация, ФизлицоПредседатель, РеквизитыШапки.Дата); 
			
			Если ЗначениеЗАполнено(СведенияОСотруднике.Должность) Тогда
				ОбластьМакета.Параметры.ДолжностьПредседателя =СведенияОСотруднике.Должность;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета); 
		
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции


Функция ПросклонятьФразуПоСловам(Знач ИсходнаяСтрока, Падеж)
	
	Результат = "";
	
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
	Если СтрДлина(ИсходнаяСтрока) = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Поз = Найти(ИсходнаяСтрока, " ");
	Пока Поз > 0 Цикл
		
		СловоВПадеже = "";
		
		Слово = Лев(ИсходнаяСтрока, Поз-1);
		//УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Слово,       Падеж, , СловоВПадеже);
		СловоВПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Слово,Падеж); 
		
		Результат = СокрЛП(Результат + " " + НРег(СловоВПадеже));
		ИсходнаяСтрока = СокрЛП(Сред(ИсходнаяСтрока, Поз));
		
		Если ПустаяСтрока(ИсходнаяСтрока) Тогда
			Прервать; // Это перестраховка. Цикл и так должен прерваться
		КонецЕсли;
		
		Поз = Найти(ИсходнаяСтрока, " ");
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ИсходнаяСтрока) Тогда // добавляем заключительное слово
		СловоВПадеже = "";
		//УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ИсходнаяСтрока, Падеж, , СловоВПадеже);
		СловоВПадеже =СклонениеПредставленийОбъектов.ПросклонятьПредставление(ИсходнаяСтрока,Падеж);
		
		Результат = СокрЛП(Результат + " " + НРег(СловоВПадеже));
		
	КонецЕсли;
	
	Если Результат = "апрель" И Падеж = 6 Тогда
		Результат = "апреле" 
	КонецЕсли; // а потом подключи морфер
	
	Возврат Результат;
	
КонецФункции

Функция М11ТекстЗапросаШапки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТребованиеНакладная.Номер,
	|	ТребованиеНакладная.Дата КАК Дата,
	|	ТребованиеНакладная.Дата КАК ДатаНач,
	|	ТребованиеНакладная.Дата КАК ДатаКон,
	|	ТребованиеНакладная.Организация,
	|	ТребованиеНакладная.Организация.КодПоОКПО КАК КодПоОКПО,
	|	ТребованиеНакладная.Ссылка,
	|	ТребованиеНакладная.Контрагент,
	|	ТребованиеНакладная.Контрагент.Представление КАК ФИОПолучателя,
	|	ТребованиеНакладная.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ТребованиеНакладная.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ТребованиеНакладная.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ТребованиеНакладная.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	ТребованиеНакладная.Склад,
	|	ТребованиеНакладная.СчетЗатрат,
	|	ТребованиеНакладная.СчетЗатрат.Код КАК СчетЗатратКод,
	|	ТребованиеНакладная.ПодразделениеЗатрат,
	|	ТребованиеНакладная.ПодразделениеЗатрат.Наименование КАК ПодразделениеЗатратНаименование,
	|	ТребованиеНакладная.ПодразделениеЗатрат.НаименованиеПолное КАК ПодразделениеЗатратНаименованиеПолное,
	|	ТребованиеНакладная.СчетаУчетаЗатратВТаблице,
	|	ТребованиеНакладная.Материалы.(
	|		Номенклатура КАК Материал,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ТребованиеНакладная.Материалы.Номенклатура.Артикул
	|			ИНАЧЕ ТребованиеНакладная.Материалы.Номенклатура.Код
	|		КОНЕЦ КАК Код,
	|		ВЫБОР
	|			КОГДА ТребованиеНакладная.Материалы.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|				ТОГДА ТребованиеНакладная.Материалы.Номенклатура.Наименование
	|			ИНАЧЕ ТребованиеНакладная.Материалы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Имя,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдИзм,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдИзмКод,
	|		Счет КАК Счет,
	|		ЕдиницаИзмерения КАК ЕдИзмМест,
	|		Количество,
	|		КоличествоМест,
	|		ДокументОприходования КАК Партия,
	|		ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|		ПодразделениеЗатрат.Наименование КАК ПодразделениеЗатратНаименование,
	|		ПодразделениеЗатрат.НаименованиеПолное КАК ПодразделениеЗатратНаименованиеПолное,
	|		СчетЗатрат.Код КАК СчетЗатратКод
	|	),
	|	ТребованиеНакладная.МатериалыЗаказчика.(
	|		Номенклатура КАК Материал,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.Артикул
	|			ИНАЧЕ ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.Код
	|		КОНЕЦ КАК Код,
	|		ВЫБОР
	|			КОГДА ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|				ТОГДА ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.Наименование
	|			ИНАЧЕ ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Имя,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдИзм,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдИзмКод,
	|		Счет КАК Счет,
	|		ЕдиницаИзмерения КАК ЕдИзмМест,
	|		Количество,
	|		КоличествоМест
	|	)
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТребованиеНакладная.Ссылка
	|ИТОГИ
	|	МИНИМУМ(ДатаНач),
	|	МАКСИМУМ(ДатаКон)
	|ПО
	|	ОБЩИЕ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаСуммСписанияПоДокументу(Знач ТаблицаСуммСписанияПоДокументам, Регистратор, ТаблицаМатериалы)
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Номенклатура");
	ТаблицаРезультата.Колонки.Добавить("Партия");
	ТаблицаРезультата.Колонки.Добавить("Количество");
	ТаблицаРезультата.Колонки.Добавить("Сумма");
	
	ТаблицаСуммСписанияПоДокументу = ТаблицаСуммСписанияПоДокументам.Скопировать(Новый Структура("Регистратор", Регистратор));
	
	СтруктураПоиска = Новый Структура("Номенклатура, Партия");
	
	// Сначала заполним сумму оценки по строкам с заполненной партией.
	Для каждого СтрокаМатериал Из ТаблицаМатериалы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаМатериал.Партия) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураПоиска.Вставить("Номенклатура",  СтрокаМатериал.Материал);
		СтруктураПоиска.Вставить("Партия",        СтрокаМатериал.Партия);
		
		НайденныеСтроки = ТаблицаСуммСписанияПоДокументу.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			// Если не нашли партии в таблице сумм - очищаем ее в таблице материалов, чтобы оценка прошла "по средней"
			СтрокаМатериал.Партия = Неопределено;
		Иначе
			СтрокаСуммСписания = НайденныеСтроки[0];
			Если СтрокаСуммСписания.Количество < СтрокаМатериал.Количество  Тогда
				СтрокаМатериал.Партия = Неопределено;
			Иначе
				
				КоличествоПоСтроке = Мин(СтрокаСуммСписания.Количество, СтрокаМатериал.Количество);
				СуммаПоСтроке      = Окр(СтрокаСуммСписания.Сумма*КоличествоПоСтроке/СтрокаСуммСписания.Количество, 2);
				
				НоваяСтрока = ТаблицаРезультата.Добавить();
				
				НоваяСтрока.Номенклатура = СтрокаМатериал.Материал;
				НоваяСтрока.Партия       = СтрокаМатериал.Партия;
				НоваяСтрока.Количество   = КоличествоПоСтроке;
				НоваяСтрока.Сумма        = СуммаПоСтроке;
				
				СтрокаСуммСписания.Сумма      = СтрокаСуммСписания.Сумма - НоваяСтрока.Сумма;
				СтрокаСуммСписания.Количество = СтрокаСуммСписания.Количество - НоваяСтрока.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// По незаполненным партиям рассчитаем среднюю
	Для каждого СтрокаСуммСписания Из ТаблицаСуммСписанияПоДокументу Цикл
		Если СтрокаСуммСписания.Количество <> 0 Тогда 
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСуммСписания, ,"Партия");
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаРезультата.Свернуть("Номенклатура, Партия", "Количество, Сумма");
	ТаблицаРезультата.Индексы.Добавить("Номенклатура, Партия");
	
	Возврат ТаблицаРезультата;
КонецФункции


Функция СуммаСписания(ТаблицаСуммСписанияПоДокументам, Номенклатура, Партия, Знач Количество)
	СуммаСписания = 0;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",  Номенклатура);
	СтруктураПоиска.Вставить("Партия",        ?(ЗначениеЗаполнено(Партия), Партия, Неопределено));
	
	НайденныеСтроки = ТаблицаСуммСписанияПоДокументам.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаСуммСписания Из НайденныеСтроки Цикл
		Если СтрокаСуммСписания.Количество = 0 ИЛИ Количество = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		КоличествоПоПартии    = Мин(СтрокаСуммСписания.Количество, Количество);
		СуммаСписанияПоПартии = Окр(СтрокаСуммСписания.Сумма * КоличествоПоПартии / СтрокаСуммСписания.Количество, 2);
		
		СтрокаСуммСписания.Сумма      = СтрокаСуммСписания.Сумма - СуммаСписанияПоПартии;
		СтрокаСуммСписания.Количество = СтрокаСуммСписания.Количество - КоличествоПоПартии;
		
		Количество    = Количество - КоличествоПоПартии;
		СуммаСписания = СуммаСписания + СуммаСписанияПоПартии;
	КонецЦикла; 
	
	Возврат СуммаСписания;
КонецФункции


Функция ПредставлениеПодразделенияЗатрат(Выборка)
	
	Если ЗначениеЗаполнено(Выборка.ПодразделениеЗатратНаименованиеПолное) Тогда
		Возврат СокрЛП(Выборка.ПодразделениеЗатратНаименованиеПолное);
	Иначе
		Возврат Выборка.ПодразделениеЗатратНаименование;
	КонецЕсли;
	
КонецФункции


Функция ПолучитьОтветственногоПоПодразделению(ДатаСреза,Подразделение) 
	
	Запрос = новый ЗАпрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование КАК ФизическоеЛицоПредставление,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК ДолжностьПредставление
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Подразделение) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо <> ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДатаСреза",ДатаСреза);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Выборка= ЗАпрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДанныеРегистра = Новый Структура;
		ДанныеРегистра.Вставить("ФизическоеЛицо", Выборка.ФизическоеЛицо);
		ДанныеРегистра.Вставить("Должность", Выборка.ДолжностьПредставление);
		
		Возврат ДанныеРегистра; 
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции;









